# 1.1 Algorithms

## Euclids algorithm

### Formal definition of a computational method
quadruple (Q,I,O,f)
    Q: a set containing subsets I and O
    f: a function, f: Q -> Q
    \forall q \in O, f(q) = q  // a solution is found

Represents:
    Q: states of the computation
    I: input
    O: output
    f: rule

Each input x in the set I defines a computational sequence:
    x0, x1, x2, ...,

    x0 = x and x_{k+1} = f(x_k) for k >= 0

A computational sequence is said to terminate in k steps if k is the smallest
integer for which x_k is in O.

Although some computational sequences may never terminate, an algorithm is
a computational method that terminates in a finitely many steps for all x in I.

#### Formalization of Euclid's algorithm

Let Q be the set of all singletons (n), all ordered pairs (m, n), 
                and all ordered quadruples, (m, n, r, 1), (m, n, r, 2), 
                and (m, n, p, 3)

where m, n, p in Z+
      r in N

Let I be the subset off all pairs (m, n)
    O be the subset of all singletons (n)
    f : Q -> Q defined as follows

    f((m, n)) = (m, n, 0, 1); f((n)) = (n)
    f((m, n, r, 1)) = (m, n, remainder of m divided by n, 2);
    f((m, n, r, 2)) = (n) if r = 0 else (m, n, r, 3);
    f((m, n, p, 3)) = (n, p, p, 1) // p is the remainder

# 1.2 Math Prelims

## 1.2.1 Mathematical induction

Let P(n) be some statement about the integer n; for example, P(n) might be "n
times (n + 3) is an even number," or "if n >= 10, then 2^n > n^3." Suppose we
want to prove that P(n) is true for all positive integers n. An important way
to do this is:
    
    a) Give a proof that P(1) is true.
    b) Give a proof that "if all of P(1), P(2), ..., P(n) are true, then P(n+1)
    is also true"; this proof should be valid for any positive integer n.

Consider the following series

1 = 1^2,
1 + 3 = 2^2
1 + 3 + 5 = 3^2
1 + 3 + 5 + 7 = 4^2
... 

We can formulate it as follows:

P(n): 1 + 3 + ... + (2n - 1) = n^2

Assuming that this is true, let's continue (add 2n + 1)

1 + 3 + .. + (2n - 1) + 2n + 1 = n^2 + 2n + 1
1 + 3 + .. + 4n = n^2 + 2n + 1
                = (n + 1) (n + 1) = (n+1)^2
QED

Phi = (1 + sqrt(5)) / 2
      01 + sqrt(0110) / 010

Fibb seq:
    F0 = 0
    F1 = 1
    Fn = Fn-1 + Fn-2

P(n):  F_n <= Phi^n-1

F_{n-1} <= phi^{n-2}
F_n <= phi^{n-1}

We know that a <= b, c <= d -> a + b <= c + d

F_n + F_{n-1} <= phi^{n-1} + phi^{n-2}
F_{n+1} <= phi^{n-2} (phi + 1)
        <= phi^{n-2} phi^2
F_{n+1} <= phi^{n}

QED

## 1.2.2 Numbers, Powers and Logarithms

Z - the integers
..., -3, -2, -1, 0, 1, 2, 3, ...

